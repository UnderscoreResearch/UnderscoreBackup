import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java'
    id 'application'
    id 'distribution'
    id 'edu.sc.seis.launch4j' version '2.5.3'
    id 'org.beryx.runtime' version '1.12.7'
}

application {
    mainClass = 'com.underscoreresearch.backup.cli.Main'
    applicationDefaultJvmArgs = ['-Xmx256m']
}

group 'com.underscoreresearch'
version '1.1.0rc2'

sourceCompatibility = 17
targetCompatibility = 17

sourceSets {
    main {
        java {
            srcDirs 'src/main'
        }
        resources {
            srcDirs 'src/resources'
        }
    }
    test {
        java {
            srcDirs 'src/test'
        }
    }
}

task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    modules = ['java.logging',
               'java.sql',
               'java.desktop',
               'java.xml',
               'jdk.unsupported',
               'java.security.jgss',
               'java.rmi',
               'java.naming',
               'java.compiler',
               'java.scripting',
               'java.management',
               'jdk.compiler',
               'java.instrument',
               'jdk.crypto.ec']
    jpackage {
        installerName = 'underscorebackup'
        installerType = System.getenv().get("INSTALLER_TYPE")
    }
}

tasks.named("compileJava").get().dependsOn("webui")

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:unchecked']
}

task installerDef(type: Copy) {
    from("${rootProject.projectDir}/windows/innosetup.iss")
    rename("innosetup.iss", "innosetup-expanded.iss")
    expand([
            applicationVersion: "${version}"
    ])
    into("${rootProject.projectDir}/windows")
}

task copyIniFile(type:Copy) {
    dependsOn(installerDef)
    from layout.projectDirectory.dir("windows/underscorebackup.l4j.ini")
    into layout.buildDirectory.dir("launch4j")
}

launch4j {
    priority = "idle"
    jreMinVersion = 11
    bundledJrePath = "..\\jre"
    bundledJre64Bit = true
    jvmOptions = ["-Dstartup.directory=\"%OLDPWD%\""]
    jreRuntimeBits = "64"
    mainClassName = 'com.underscoreresearch.backup.cli.Main'
    icon = "${rootProject.projectDir}/windows/application.ico"
}

task consoleexe(type: edu.sc.seis.launch4j.tasks.Launch4jLibraryTask) {
    dependsOn(copyIniFile)
    outfile = "underscorebackup.exe"
    headerType = "console"
}

task guiexe(type: edu.sc.seis.launch4j.tasks.Launch4jLibraryTask) {
    cmdLine = "interactive"
    outfile = "underscorebackup-gui.exe"
    headerType = "gui"
}

task installer(dependsOn: [jre, guiexe, consoleexe, installerDef], type:Exec) {
    workingDir "${rootProject.projectDir}/windows"
    executable 'C:\\Program Files (x86)\\Inno Setup 6\\iscc.exe'
    args "innosetup-expanded.iss"
}

task webuiinstall(type:Exec) {
    onlyIf {
        !new File("src/main/resources/web/index.html").exists()
    }
    workingDir 'webui'
    commandLine 'npm', "install"
}

task webui(dependsOn: [webuiinstall], type:Exec) {
    onlyIf {
        !new File("src/main/resources/web/index.html").exists()
    }
    workingDir 'webui'
    commandLine 'npm', "run", "build"
}

task integrationTest(type:Exec) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        dependsOn consoleexe
        workingDir "${rootProject.projectDir}"
        commandLine "perl", "integrationtests\\testsuite.pl", "$buildDir\\integrationtests", "$buildDir\\launch4j\\underscorebackup.exe", "${rootProject.projectDir}\\webui"
    } else {
        dependsOn distTar
        commandLine "${rootProject.projectDir}/integrationtests/executetests.sh", "$buildDir/distributions/${project.name}-${project.version}.tar", "${rootProject.projectDir}/webui"
    }
}

repositories {
    mavenCentral()
}

distributions {
    main {
        distributionBaseName = 'underscorebackup'
        contents {
            from('.') {
                include 'README.md'
                include 'bin/*'
                include 'scripts/*'
            }
        }
    }
}

tasks.jpackageImage.doLast {
    copy {
        from "scripts"
        include "underscorebackup.service"
        include "startbackupservice.sh"
        into "build/jpackage/$project.name/bin"
    }

    copy {
        from "."
        include "README.md"
        into "build/jpackage/$project.name/bin"
    }
}


dependencies {

    implementation (
            'com.dropbox.core:dropbox-core-sdk:5.3.0',
            'com.cronutils:cron-utils:9.2.0',
            'com.fasterxml.jackson.core:jackson-databind:2.13.4',
            'com.google.guava:guava:31.1-jre',
            'com.google.inject:guice:5.1.0',
            'com.hierynomus:smbj:0.11.5',
            'com.joestelmach:natty:0.13',
            'commons-codec:commons-codec:1.15',
            'commons-cli:commons-cli:1.5.0',
            'javax.xml.bind:jaxb-api:2.3.1',
            'org.apache.commons:commons-lang3:3.12.0',
            'org.apache.logging.log4j:log4j-api:2.19.0',
            'org.apache.logging.log4j:log4j-core:2.19.0',
            'org.apache.logging.log4j:log4j-slf4j2-impl:2.19.0',
            'org.mapdb:mapdb:3.0.8',
            'org.projectlombok:lombok:1.18.24',
            'org.reflections:reflections:0.10.2',
            'org.slf4j:slf4j-api:2.0.0',
            'org.takes:takes:1.24.4',
            'software.amazon.awssdk:s3control:2.17.271'
    )

    testImplementation (
            'org.hamcrest:hamcrest:2.2',
            'org.junit.jupiter:junit-jupiter:5.9.0',
            'org.mockito:mockito-junit-jupiter:4.8.0'
    )

    testRuntimeOnly (
            'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    )

    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}

test {
    useJUnitPlatform()
}

task installerPkg(dependsOn: ["runtime"], type:Exec) {
    workingDir "${rootProject.projectDir}"
    executable 'osx/createinstaller.sh'
    args "${project.version}"
}

task uninstallerPkg(type:Exec) {
    workingDir "${rootProject.projectDir}"
    executable 'osx/createuninstaller.sh'
    args "${project.version}"
}

task allDist() {
    dependsOn distZip, distTar
}

task installers(type:Exec) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        workingDir "${rootProject.projectDir}"
        commandLine 'gradlew.bat', "installer"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        dependsOn uninstallerPkg
        workingDir "${rootProject.projectDir}"
        commandLine './gradlew', "installerPkg"
    } else {
        workingDir "${rootProject.projectDir}"
        commandLine 'bash', '-c', 'INSTALLER_TYPE=deb ./gradlew jpackage && mv build/jpackage/*.deb build/distributions && INSTALLER_TYPE=rpm ./gradlew jpackage && mv build/jpackage/*.rpm build/distributions'
    }
}

allDist.finalizedBy(installers)

task allDistTest {
    dependsOn test, integrationTest, allDist
}
