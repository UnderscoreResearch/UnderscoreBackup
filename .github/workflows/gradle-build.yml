# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

run-name: Building ${{ github.ref_name }}

on:
  create

jobs:
  build:
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-x64
          - ubuntu-latest
          - macos-arm
    permissions: write-all
    runs-on: ${{ matrix.os }}

    steps:
      - uses: act10ns/slack@v2
        with:
          webhook-url: ${{ secrets.SLACK_HOOK }}
          status: STARTING
          message: Starting build of *${{ github.ref_name }}* on *${{ matrix.os }}*

      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Install the Apple certificate and provisioning profile
        if: contains(matrix.os, 'macos')
        env:
          APPLICATION_CERTIFICATE_BASE64: ${{ secrets.APPLICATION_CERTIFICATE }}
          CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$APPLICATION_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$CERT_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          xcrun notarytool store-credentials "$CERT_PASSWORD" --apple-id "support@underscoreresearch.com" --team-id $APPLE_TEAM_ID --password $APPLE_APP_PASSWORD

      - name: Building Web UI
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: |
          cd webui
          npm install
          npm run build

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_ACTION: yes
          GITHUB_TARGET: ${{ matrix.os }}
          CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
          WINDOWS_CERT_DATA: ${{ secrets.WINDOWS_CODE_SIGN }}
          WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_SIGN_PASSWORD }}
        with:
          arguments: downloadJavaAllDistTest

      - name: Apply code signature to Windows installer
        if: contains(matrix.os, 'windows')
        env:
          WINDOWS_CERT_DATA: ${{ secrets.WINDOWS_CODE_SIGN }}
          WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_SIGN_PASSWORD }}
        run: |
          perl windows\signexe.pl required build\distributions

      - name: Remove duplicate distributions for Windows
        if: contains(matrix.os, 'windows')
        run: |
          del build\distributions\*.tar
          del build\distributions\*.zip

      - name: Remove duplicate distributions for MacOS
        if: contains(matrix.os, 'macos')
        run: |
          rm build/distributions/*.tar
          rm build/distributions/*.zip

      - name: Upload binaries to release
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "build/distributions/*"
          tags: true
          tag_name: ${{ github.ref_name }}
          draft: true
          overwrite: true

      - uses: act10ns/slack@v2
        with:
          webhook-url: ${{ secrets.SLACK_HOOK }}
          status: ${{ job.status }}
          message: Build of *${{ github.ref_name }}* on *${{ matrix.os }}* completed with *${{ job.status }}*
        if: always()
